{ "metadata": { "title": "Learning Object-Oriented Programming and Design with Pharo" ,
	"attribution" : "Stéphane Ducasse"} } 



${inputFile:Chapters/Introduction/Introduction.pillar}$

! Key concepts in a nutshell

${inputFile:Chapters/OOPNutshell/OOPNutshell.pillar}$

! Getting in touch with objects

${inputFile:Chapters/PlayingWithTurtles/PlayingWithTurtles.pillar}$

${inputFile:Chapters/SyntaxNutshell/SyntaxNutshell.pillar}$

${inputFile:Chapters/Katas/GramKatas.pillar}$

${inputFile:Chapters/Katas/GramVariation.pillar}$

! Simple Objects
In this book part we suggest to read carefully the next chapter and after to do the following ones.
Since the following chapters are extremely simple exercises it can be tedious to do them all.

${inputFile:Chapters/ObjectsAndClasses/ObjectsAndClasses.pillar}$

${inputFile:Chapters/Counter/Counter.pillar}$ 

${inputFile:Chapters/Converter/Converter.pillar}$

${inputFile:Chapters/Wallet/Wallet.pillar}$

${inputFile:Chapters/DSL/DSL.pillar}$

!! Tamagoshi (graphics TBMigrated)

${inputFile:Chapters/JoeTheBox/JoeTheBox.pillar}$

! Looking at Inheritance

!! Inheritance (TBMigrated)
- should find a non-graphical
- check the old explanation

${inputFile:Chapters/SimpleLAN/SimpleLANDefinition.pillar}$

${inputFile:Chapters/Expressions/Expressions.pillar}$

! Sending messages

!! Sending a message is making a choice

Sending a message is doing a choice: it is selecting the method that is defined for the receiver

When we execute a method, one key information we get is that the method is that receiver is from this class or one of its subclasses

Classes represent choices. 

!!! Summing and converting money

We will now work on one example proposed by A. Bergel in the Pharo mailing-list and we would like to thank him for it. 
[[[
1 EUR = 662 CLP (Chilean pesos) 
]]]



You have a class Money to which you can sum other money. 

[[[
Object subclass: #Money 
	instVarNames: ‘value’ 
]]]

[[[
Money >> + anotherMoney 
   self subclassResponsibility 
]]]

[[[
Money >> sumWithEUR: money 
   self subclassResponsibility 
]]]

[[[
Money >> sumWithCLP: money 
   self subclassResponsibility 
]]]

[[[
Money >> = anotherMoney 
  ^ self class == anotherMoney class and: [ self value = anotherMoney value ] 
]]]

[[[
Money >> printOn: str 
   super printOn: str. 
   str nextPut: $<. 
   str nextPutAll: self value asString. 
   str nextPut: $>. 
]]]

You have two subclasses: 
Money subclass: #EUR 
Money subclass: #CLP 

[[[
EUR>>+ anotherMoney 
        ^ anotherMoney sumWithEUR: self 

EUR>>sumWithEUR: money 
        ^ EUR new value: self value + money value 

EUR>>sumWithCLP: money 
        ^ CLP new value: (self value * 662) + money value 

CLP>>+ anotherMoney 
        ^ anotherMoney sumWithCLP: self 

CLP>>sumWithEUR: money 
        ^ EUR new value: (self value / 662) + money value 

CLP>>sumWithCLP: money 
     ^ CLP new value: self value + money value 
]]]


	Here is a test: 
	TestCase subclass: #MoneyTest 

[[[
MoneyTest >> testSum 
   | clp1 eur1 clp2 eur2 |
   clp1 := CLP new value: 3500.
   eur1 := EUR new value: 10.
   clp2 := CLP new value: 5000.
   eur2 := EUR new value: 20.

   self assert: clp1 + clp2 equals: (CLP new value: 8500). 
   self assert: clp1 + eur1 equals: (CLP new value: 3500 + 6620).
        
   self assert: eur1 + eur2 equals: (EUR new value: 30).
   self assert: eur1 + clp2 equals: (EUR new value: 5000 / 662 + 10).
]]]

${inputFile:Chapters/PaperStoneScissor/PaperStoneScissor.pillar}$

!! Playing with Visitors

Here I should take the slides flow from the design mooc lectures. 



! Project:  Managing Game Collection (TBD)

! Project: TinyChat (TBIncluded)

! Project: Sokoban (TB DONE)

! Project: LSystem (TBMigrated)

Lindermayer systems, also called ''L-Systems'', have been developed
by biology theorists to understand and simulate the growth of plants
cite|Pruz90a. In the following chapters we propose you to implement
different L-Systems from a minimalist to elaborate
ones. Chapter ch:lsystem presents the simplest possible
L-Systems, i.e., L-System composed by one single rule.
Chapter ch:lsystem2 presents an object-oriented model of
L-System that alleviate the limits of the previous implementation.
Chapter ch:plant defines a new class of turtle that allows one
to model plants with the L-Systems defined previously. Finally,
Chapter ch:parametric introduces Parametric L-Systems that
allows one to express more powerful L-Systems. This chapter shows in
particular how inheritance can be used to reuse class already defined.

!! Lindermayer Systems
	MyBooks/botsinc/BookTwo/Debugger/

!!!	LSystem
	getting started
!!!	AdvancedL-Systems	
	rules
!!!	PlantModeling
	stack turtle
	
!! Project:  Game Of Life (TBEvaluated)
with conditionals and polymorphism

!! Project: Path-finder (it is graphical so out or should get a textual version)

!! Classes are objects too

May be at the end of the book: class are objects too. 
	Model2 in MyBooks/botsinc/BookTwo/SyntaxAndModel2

! Solutions 	

${inputFile:Chapters/Solutions/Solutions.pillar}$
