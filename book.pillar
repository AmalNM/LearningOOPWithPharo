{ "metadata": { "title": "Learning Object-Oriented Programming with Pharo" ,
	"attribution" : "StÃ©phane Ducasse"} } 


!! A word of presentation

I started to write this book back in 1998 when I wrote around 900 pages for the pre sequel to  "Learning Programming with Robots". Apparently I needed to write to understand what I wanted to explain and how. From this I extracted Learning Programming with Robots. For me, Learning Programming with Robots was a book to teach simple concepts such as variables, loops, procedures and to help people to teach kids how to program. But in fact, I got really frustrated because to be understable by everyone I had to remove what I like: Object-Oriented Programming and good object-oriented programming. 
At that time, I met Harald Wertz (which gave me nice ideas and pointers such as LSystems) and he asked why I focused on procedural thinking and that I should better teach Object-Oriented Programming.  And he was right. This remark was like a bee in my bonet for a couple of years. In fact it was my original objective but I was exhausted after my first attempt.

Now nearly ten years after, I'm ready to write a book to start with object-oriented programming. I hope that you will enjoy it  as much as I did - even if writing a book for me is a really long and daunting task. 

!!! Structure of the book

While writing this book, I faced a challenge to find the correct level of difficulties. To solve this problem I structured the book into basic elements and projects (more advanced topics).

In addition some chapters are key and conceptual while others are more little tutorials that act more as explained step by step examples. Some of such chapters can be skipped while the conceptual one should not. 


!!! What are the concepts you will learn
We would like to present the concepts that we want to teach you and that hopefully you should acquire. Note that we will not explain OOP in general but within the context of Pharo. Pharo is the essence of Object-Oriented programming since it object model is minimal but it covers the key and essential aspect of OOP. 



!!!! Syntax, Blocks and Iterators
Since we need a language to express our programs, we will teach you the syntax of Pharo. In particular we will use some simple  
- one postcard
- closure
- iterators

[[[
#(1 2 3) size
>>> 3
]]]

!!!! OOP concepts and more
- Objects / Classes: 
- Messages / Methods
- self and its semantics
- Inheritance
- super and its semantics
- Delegation
- Message sends are choice (what would be the equivalent to not)
- Message sends are plans for reuse
- Double Dispatch
- Don't ask tell
- Tests are your life ensurance
- Polymorphism
- Composite
- Hook template
- Strategy 


${inputFile:Chapters/OOPNutshell/OOPNutshell.pillar}$

! Getting in touch with objects

${inputFile:Chapters/PlayingWithTurtles/PlayingWithTurtles.pillar}$

${inputFile:Chapters/SyntaxNutshell/SyntaxNutshell.pillar}$

${inputFile:Chapters/Katas/GramKatas.pillar}$

${inputFile:Chapters/Katas/GramVariation.pillar}$


! Simple Objects
In this book part we suggest to read carefully the next chapter and after to do the following ones. 
Since the following chapters are extremely simple exercises it can be tedious to do them all. 

${inputFile:Chapters/ObjectsAndClasses/ObjectsAndClasses.pillar}$

${inputFile:Chapters/Counter/Counter.pillar}$ 

${inputFile:Chapters/Converter/Converter.pillar}$

${inputFile:Chapters/Wallet/Wallet.pillar}$

${inputFile:Chapters/DSL/DSL.pillar}$

${inputFile:Chapters/JoeTheBox/JoeTheBox.pillar}$

! Inheritance
- should find a non-graphical
- check the old explanation

${inputFile:Chapters/SimpleLAN/SimpleLANDefinition.pillar}$
!! LAN More chapter (ok)

!! Gruyere-oriented programming 
The power of self in action.

!!! Hook and Template

${inputFile:Chapters/PaperStoneScissor/PaperStoneScissor.pillar}$

! Project:  Managing Game Collection

! Project: TinyChat

! Project: Sokoban

! Project: LSystem (Graphics so let us stop)

Lindermayer systems, also called ''L-Systems'', have been developed
by biology theorists to understand and simulate the growth of plants
cite|Pruz90a. In the following chapters we propose you to implement
different L-Systems from a minimalist to elaborate
ones. Chapter ch:lsystem presents the simplest possible
L-Systems, i.e., L-System composed by one single rule.
Chapter ch:lsystem2 presents an object-oriented model of
L-System that alleviate the limits of the previous implementation.
Chapter ch:plant defines a new class of turtle that allows one
to model plants with the L-Systems defined previously. Finally,
Chapter ch:parametric introduces Parametric L-Systems that
allows one to express more powerful L-Systems. This chapter shows in
particular how inheritance can be used to reuse class already defined.

!! Lindermayer Systems
	MyBooks/botsinc/BookTwo/Debugger/
	
!!!	LSystem
		getting started
!!!	AdvancedL-Systems	
		rules
!!!	PlantModeling
		stack turtle

! Projects - Others

!! Tamagoshi (graphics so let us stop)
- state diagram

!! QRCode looks fun

!! Game Of Life (may be with a textual version)
with conditionals and polymorphism




!! Project: Path-finder (it is graphical so out or should get a textual version)

! Advanced topics? 

!! Classes are objects too

May be at the end of the book: class are objects too. 
	Model2 in MyBooks/botsinc/BookTwo/SyntaxAndModel2
