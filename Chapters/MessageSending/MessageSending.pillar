!! Sending a message is making a choice
@cha:sending

Sending a message is making a choice!


!!! Implementing not



!!! Implementing or





!!! Booleans
 ==Boolean== is the abstract superclass of the ''singleton'' classes ==True== and ==False==.

+The Boolean Hierarchy.>file://figures/BooleanHierarchy.png|label=fig:booleans|width=40+

Most of the behaviour of ==Boolean==s can be understood by considering the
method ==ifTrue:ifFalse:==, which takes two ==Blocks== as arguments.

[[[
4 factorial > 20
	ifTrue: [ 'bigger' ]
	ifFalse: [ 'smaller' ]
>>> 'bigger'
]]]

The method ==ifTrue:ifFalse:== is abstract in class ==Boolean==. The implementations in its concrete
subclasses are both trivial:

[[[caption=Implementations of ==ifTrue:ifFalse:==
True >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
   ^ trueAlternativeBlock value
]]]

[[[
False >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
   ^ falseAlternativeBlock value
]]]

Each of them execute the correct block depending on the receiver of the message.
In fact, this is the essence of OOP: when a message is sent to an object, the
object itself determines which method will be used to respond. In this case an
instance of ==True== simply executes the ''true'' alternative, while an
instance of ==False== executes the ''false'' alternative. All the abstract
==Boolean== methods are implemented in this way for ==True== and ==False==. 

For example the implementation of negation (message ==not==) is defined the same way:

[[[
True >> not
   "Negation--answer false since the receiver is true."
   ^ false
]]]

[[[
False >> not
   "Negation--answer true since the receiver is false."
   ^ true
]]]


!!! What is the point?


!!! Vocabulary: Sending a message vs. calling a method

The word “method” was introduced in Smalltalk as a metaphor - You tell objects to do something by sending them a message; the object then chooses the method it will use to handle that message.

If you talk about “calling a method” you are breaking the metaphor - it makes no sense in English to “call someone’s method”!
The point is that objects should encapsulate their behavior; you speak to their interface by sending a message. The method is internal – you should not know it.


!!! 

Sending a message is doing a choice: it is selecting the method that is defined for the receiver.

When we execute a method, one key information we get is that the method is that receiver is from this class or one of its subclasses

Classes represent choices. 















