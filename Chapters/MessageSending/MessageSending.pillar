!! Sending a message is making a choice
@cha:sending

Sending a message is making a choice!


!!! Implementing not



!!! Implementing or





!!! Booleans
 ==Boolean== is the abstract superclass of the ''singleton'' classes ==True== and ==False==.

+The Boolean Hierarchy.>file://figures/BooleanHierarchy.png|label=fig:booleans|width=40+

Most of the behaviour of ==Boolean==s can be understood by considering the
method ==ifTrue:ifFalse:==, which takes two ==Blocks== as arguments.

[[[
4 factorial > 20
	ifTrue: [ 'bigger' ]
	ifFalse: [ 'smaller' ]
>>> 'bigger'
]]]

The method ==ifTrue:ifFalse:== is abstract in class ==Boolean==. The implementations in its concrete
subclasses are both trivial:

[[[caption=Implementations of ==ifTrue:ifFalse:==
True >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
   ^ trueAlternativeBlock value
]]]

[[[
False >> ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock
   ^ falseAlternativeBlock value
]]]

Each of them execute the correct block depending on the receiver of the message.
In fact, this is the essence of OOP: when a message is sent to an object, the
object itself determines which method will be used to respond. In this case an
instance of ==True== simply executes the ''true'' alternative, while an
instance of ==False== executes the ''false'' alternative. All the abstract
==Boolean== methods are implemented in this way for ==True== and ==False==. 

For example the implementation of negation (message ==not==) is defined the same way:

[[[
True >> not
   "Negation--answer false since the receiver is true."
   ^ false
]]]

[[[
False >> not
   "Negation--answer true since the receiver is false."
   ^ true
]]]


!!! What is the point?


!!! Vocabulary: Sending a message vs. calling a method

The word “method” was introduced in Smalltalk as a metaphor - You tell objects to do something by sending them a message; the object then chooses the method it will use to handle that message.

If you talk about “calling a method” you are breaking the metaphor - it makes no sense in English to “call someone’s method”!
The point is that objects should encapsulate their behavior; you speak to their interface by sending a message. The method is internal – you should not know it.


!!! 

Sending a message is doing a choice: it is selecting the method that is defined for the receiver.

When we execute a method, one key information we get is that the method is that receiver is from this class or one of its subclasses

Classes represent choices. 

!!! Summing and converting money

We will now work on one example proposed by A. Bergel in the Pharo mailing-list and we would like to thank him for it. 
[[[
1 EUR = 662 CLP (Chilean pesos) 
]]]



You have a class Money to which you can sum other money. 

[[[
Object subclass: #Money 
	instVarNames: ‘value’ 
]]]

[[[
Money >> + anotherMoney 
   self subclassResponsibility 
]]]

[[[
Money >> sumWithEUR: money 
   self subclassResponsibility 
]]]

[[[
Money >> sumWithCLP: money 
   self subclassResponsibility 
]]]

[[[
Money >> = anotherMoney 
  ^ self class == anotherMoney class and: [ self value = anotherMoney value ]
]]]

[[[
Money >> printOn: str
   super printOn: str.
   str nextPut: $<.
   str nextPutAll: self value asString.
   str nextPut: $>.
]]]

You have two subclasses: 
Money subclass: #EUR 
Money subclass: #CLP 

[[[
EUR >> + anotherMoney 
   ^ anotherMoney sumWithEUR: self
]]]
[[[
EUR >> sumWithEUR: money 
   ^ EUR new value: self value + money value
]]]
[[[
EUR >> sumWithCLP: money 
   ^ CLP new value: (self value * 662) + money value
]]]
[[[
CLP >> + anotherMoney
   ^ anotherMoney sumWithCLP: self
]]]
[[[
CLP >> sumWithEUR: money
   ^ EUR new value: (self value / 662) + money value
]]]
[[[
CLP >> sumWithCLP: money
  ^ CLP new value: self value + money value
]]]


Here is a test: 
	TestCase subclass: #MoneyTest 

[[[
MoneyTest >> testSum 
   | clp1 eur1 clp2 eur2 |
   clp1 := CLP new value: 3500.
   eur1 := EUR new value: 10.
   clp2 := CLP new value: 5000.
   eur2 := EUR new value: 20.

   self assert: clp1 + clp2 equals: (CLP new value: 8500). 
   self assert: clp1 + eur1 equals: (CLP new value: 3500 + 6620).
        
   self assert: eur1 + eur2 equals: (EUR new value: 30).
   self assert: eur1 + clp2 equals: (EUR new value: 5000 / 662 + 10).
]]]
















