!! Challenge yourself
@cha:challenging

In Pharo everything is an object and most computation happens by sending  ''messages'' to objects. In this chapter we propose a list of exercises to challenge you with the syntax.


!!!Challenge: Message identification
For each of the expressions below, fill in the answers:

- What is the receiver object?
- What is the message selector?
- What is/are the argument (s)?
- What is the result returned by this expression execution?

[[[
3 + 4

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
Date today

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
#('' 'World') at: 1 put: 'Hello'

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
#(1 22 333) at: 2

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
#(2 33 -4 67) collect: [ :each | each abs ]

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
25 @ 50

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
SmallInteger maxVal


	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
#(a b c d e f) includesAll: #(f d b)

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
true | false

	receiver: 
	selector:
	arguments:
	results:
]]]

[[[
Point selectors

	receiver: 
	selector:
	arguments:
	results:
]]]

!!! Challenge: Literal objects

What kind of object does the following literal expressions refer to? It is the same as asking what is the result of sending the ==class== message to such expressions. 



[[[
1.3

>
]]]

[[[
#node1

>
]]]

[[[
#(2 33 4)

>
]]]

[[[
'Hello, Dave'

>
]]]

[[[
[ :each | each scale: 1.5 ]

>
]]]

[[[
$A 

>
]]]

[[[
true

>
]]]

[[[
1

>
]]]

!!! Challenge: Kind of messages

Examine the following messages and report if the message is unary, binary or keyword-based.

[[[
1 log

>
]]]

[[[
Browser open

>
]]]

[[[
2 raisedTo: 5

>
]]]

[[[
'hello', 'world'

>
]]]

[[[
10@20

>
]]]

[[[
point1 x

> 
]]]

[[[
point1 distanceFrom: point2

>
]]]





!!! Challenge: Results

Examine the following expressions. What is the value returned by the execution of the following expressions?

[[[
1 + 3 negated

>
]]]

[[[
1 + (3 negated)

>
]]]

[[[
2 raisedTo: 3 + 2

>
]]]

[[[
| anArray |
anArray := #('first' 'second' 'third' 'fourth').
anArray at: 2


> 
]]]

[[[
#(2 3 -10 3) collect: [ :each | each * each]

>
]]]

[[[
6 + 4 / 2

>
]]]


[[[
2 negated raisedTo: 3 + 2

>
]]]

[[[
#(a b c d e f) includesAll: #(f d b)

>
]]]

!!! Challenge: unneeded parentheses 
Putting more  parentheses than necessary is  a good way  to get started. Such  practice however leads to  less readable expressions. Rewrite the following expressions using the least number of parentheses. 


[[[
x between: (pt1 x) and: (pt2 y)


 ...
]]]

[[[
((#(a b c d e f) asSet) intersection: (#(f d b) asSet))


 ...
]]]

[[[
(x isZero)
     ifTrue: [....]
(x includes: y)
     ifTrue: [....]
	 




 ...
]]]

[[[
(OrderedCollection new)
    add: 56; 
    add: 33; 
    yourself




 ...
]]]

[[[
((3 + 4) + (2 * 2) + (2 * 3))


 ...
]]]

[[[
(Integer primesUpTo: 64) sum


 ...
]]]

[[[
('http://www.pharo.org' asUrl) retrieveContents


 ...
]]]

!! Challenge yourself solutions

[[[
3 + 4

	receiver: 3
	selector: +
	arguments: 4
	results: 7
]]]

[[[
Date today

	receiver: Date
	selector: today 
	arguments: _
	results: The date of today
]]]

[[[
#('' 'World') at: 1 put: 'Hello'

	receiver: #('' 'World')
	selector: at:put:
	arguments: 1 and 'Hello'
	results: #('Hello' 'World')
]]]

[[[
#(1 22 333) at: 2

	receiver: #(1 22 333)
	selector:	at:
	arguments: 2
	results: 22
]]]

[[[
#(2 33 -4 67) collect: [ :each | each abs ]

	receiver: #(2 33 -4 67)
	selector: collect: 
	arguments: [ :each | each abs ]
	results: #(2 33 4 67)
]]]

[[[
25 @ 50

	receiver: 25
	selector: @
	arguments: 50
	results: 25@50 (a point)
]]]

[[[
SmallInteger maxVal


	receiver: the class SmalltalkInteger
	selector: maxVal
	arguments: _ 
	results: returns the largest small integer
]]]

[[[
#(a b c d e f) includesAll: #(f d b)

	receiver: #(a b c d e f)
	selector: includesAll:
	arguments: #(f d b)
	results: true
]]]

[[[
true | false

	receiver: true
	selector: |
	arguments: false
	results: true
]]]

[[[
Point selectors

	receiver: Point 
	selector: selectors
	arguments: _
	results: a long arrays of selectors understood by the class Point 
]]]

!!! Challenge: Literal objects

What kind of object does the following literal expressions refer to? It is the same as asking what is the result of sending the ==class== message to such expressions. 



[[[
1.3

> Float
]]]

[[[
#node1

> Symbol
]]]

[[[
#(2 33 4)

> Array
]]]

[[[
'Hello, Dave'

> String
]]]

[[[
[ :each | each scale: 1.5 ]

> Block
]]]

[[[
$A 

> Character
]]]

[[[
true

> Boolean
]]]

[[[
1

> SmallInteger
]]]

!!! Challenge: Kind of messages

Examine the following messages and report if the message is unary, binary or keyword-based.

[[[
1 log

> Unary
]]]

[[[
Browser open

> Unary
]]]

[[[
2 raisedTo: 5

> Keyword-based
]]]

[[[
'hello', 'world'

> Binary
]]]

[[[
10@20

> Binary
]]]

[[[
point1 x

> Unary
]]]

[[[
point1 distanceFrom: point2

> Keyword-based
]]]





!!! Challenge: Results

Examine the following expressions. What is the value returned by the execution of the following expressions?

[[[
1 + 3 negated

> -2
]]]

[[[
1 + (3 negated)

> -2
]]]

[[[
2 raisedTo: 3 + 2

> 32
]]]

[[[
| anArray |
anArray := #('first' 'second' 'third' 'fourth').
anArray at: 2


> 'second'
]]]

[[[
#(2 3 -10 3) collect: [ :each | each * each]

> #(4 9 100 9)
]]]

[[[
6 + 4 / 2

> 5
]]]


[[[
2 negated raisedTo: 3 + 2

> -32
]]]

[[[
#(a b c d e f) includesAll: #(f d b)

> true
]]]

!!! Challenge: unneeded parentheses 
Putting more  parentheses than necessary is  a good way  to get started. Such  practice however leads to  less readable expressions. Rewrite the following expressions using the least number of parentheses. 


[[[
x between: (pt1 x) and: (pt2 y)

is equivalent to 

x between: pt1 x and: pt2 y
]]]

[[[
((#(a b c d e f) asSet) intersection: (#(f d b) asSet))

is equivalent to 

#(a b c d e f) asSet intersection: #(f d b) asSet
]]]

[[[
(x isZero)
     ifTrue: [....]
(x includes: y)
     ifTrue: [....]
	 
is equivalent to 


x isZero
     ifTrue: [....]
(x includes: y)
     ifTrue: [....]
]]]

[[[
(OrderedCollection new)
    add: 56; 
    add: 33; 
    yourself

is equivalent to

OrderedCollection new
	    add: 56; 
	    add: 33; 
	    yourself
]]]

[[[
((3 + 4) + (2 * 2) + (2 * 3))

is equivalent to

3 + 4 + (2 * 2) + (2 * 3)
]]]

[[[
(Integer primesUpTo: 64) sum

No changes
]]]

[[[
('http://www.pharo.org' asUrl) retrieveContents

is equivalent to 

'http://www.pharo.org' asUrl retrieveContents
]]]

