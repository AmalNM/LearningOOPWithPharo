




!!! Specify additions 


!!!! Adding two dice

[[[
DieTest >> testAddTwoDice

	| hd |
	hd := (Die withFaces: 6) + (Die withFaces: 6).
	self assert: hd dice size = 2.
]]]	

!!!! Adding a die and a dieHandle

[[[
DieTest >> testAddingADiceAndHandle

	| hd |
	hd := (Die withFaces: 6) + 
	(DieHandle new addDie: (Die withFaces: 6); yourself).
	self assert: hd dice size = 2.
]]]


!!! A first implementation

[[[
DieHandle >> + aDieOrADiceHandful

	^ (aDieOrADiceHandful class = DiceHandful) 
		ifTrue: [ DiceHandful new dice: (self dice, aDieOrADiceHandful dice) ]
		ifFalse: [ DiceHandful new dice: self dice; addDie: aDieOrADiceHandful ].
]]]

[[[
Die >> + aDieOrDiceHandful
	| selfAsDiceHandful |
	selfAsDiceHandful := DiceHandful new addDie: self.
	^ (selfAsDiceHandful + aDieOrDiceHandful).
]]]



!!! Let us step back 



!!! Adding two dice

[[[	
Die >> + aDie
	
	^ DieHandle new 
		addDie: self; 
		addDie: aDie; yourself
]]]


!!! Preparing the mix

[[[
Die >> + aDie	
	^ aDie sumFromDie: self
]]]

[[[
Die >> sumFromDie: aDie

	^ DieHandle new 
		addDie: self; 
		addDie: aDie; yourself
]]]


[[[
DieHandle >> sumFromHandle: aDieHandle
	| handle |
	handle := self class new.
	self dice do: [ :each | handle addDie: each ].
	aDieHandle dice do: [ :each | handle addDie: each ].
	^ handle
]]]


[[[
DieHandle >> + aDieHandle
	^ aDieHandle sumFromHandle: self
]]]

Up until here we did not change much and all the tests should run. 



!!! Adding an handle and a die 

[[[
DieHandleTest >> testAddingAnHandleWithADie
	| handle res |
	handle := DieHandle new
		addDie: (Die faces: 6);
		addDie: (Die faces: 10);
		yourself.
	res := handle + (Die withFaces: 20).
	self assert: res diceNumber = 3
]]]

[[[
Die >> sumFromHandle: aDieHandle
	
	| hd |
	hd := DieHandle new.
	hd addDie: self.
	aDieHandle dice do: [ :each | hd addDie: each ].
	^ hd
]]]


!!! Adding a die and a handle


[[[
DieHandle >> sumFromDie: aDie
	| handle |
	handle := self class new.
	self dice do: [ :each | handle addDie: each ].
	handle addDie: aDie.
	^ handle
]]]



!!! For a better documentation

[[[
Die >> + aDicable	
	^ aDicable sumFromDie: self
]]]


[[[
DieHandle >> + aDieHandle
	^ aDieHandle sumFromHandle: self
]]]



!!! Summing and converting money

We will now work on one example proposed by A. Bergel in the Pharo mailing-list and we would like to thank him for it. 
[[[
1 EUR = 662 CLP (Chilean pesos) 
]]]



You have a class Money to which you can sum other money. 

[[[
Object subclass: #Money 
	instVarNames: ‘value’ 
]]]

[[[
Money >> + anotherMoney 
   self subclassResponsibility 
]]]

[[[
Money >> sumWithEUR: money 
   self subclassResponsibility 
]]]

[[[
Money >> sumWithCLP: money 
   self subclassResponsibility 
]]]

[[[
Money >> = anotherMoney 
  ^ self class == anotherMoney class and: [ self value = anotherMoney value ]
]]]

[[[
Money >> printOn: str
   super printOn: str.
   str nextPut: $<.
   str nextPutAll: self value asString.
   str nextPut: $>.
]]]

You have two subclasses: 
Money subclass: #EUR 
Money subclass: #CLP 

[[[
EUR >> + anotherMoney 
   ^ anotherMoney sumWithEUR: self
]]]
[[[
EUR >> sumWithEUR: money 
   ^ EUR new value: self value + money value
]]]
[[[
EUR >> sumWithCLP: money 
   ^ CLP new value: (self value * 662) + money value
]]]
[[[
CLP >> + anotherMoney
   ^ anotherMoney sumWithCLP: self
]]]
[[[
CLP >> sumWithEUR: money
   ^ EUR new value: (self value / 662) + money value
]]]
[[[
CLP >> sumWithCLP: money
  ^ CLP new value: self value + money value
]]]


Here is a test: 
	TestCase subclass: #MoneyTest 

[[[
MoneyTest >> testSum 
   | clp1 eur1 clp2 eur2 |
   clp1 := CLP new value: 3500.
   eur1 := EUR new value: 10.
   clp2 := CLP new value: 5000.
   eur2 := EUR new value: 20.

   self assert: clp1 + clp2 equals: (CLP new value: 8500). 
   self assert: clp1 + eur1 equals: (CLP new value: 3500 + 6620).
        
   self assert: eur1 + eur2 equals: (EUR new value: 30).
   self assert: eur1 + clp2 equals: (EUR new value: 5000 / 662 + 10).
]]]





