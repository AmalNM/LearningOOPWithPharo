{ "title" : "Converter"}@cha_converterIn this chapter we will implement a little temperature converter between celcius and farhenheit. It will show how to write test to specify the expected results. !! First a testFirst we define a test class within the package 'Converter'. It inherits from the class ==TestCase==. This class is special, any method starting with a 'test' will be executed automatically, one by one each time on a new instance of the class (to make sure that tests do not interfere with each others). TestCase subclass: #TemperatureConverterTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Converter']]]Converting from Fahrenheit to Celcius is done with a simple linear transformation.The formula to get Fahrenheit from Celcius is F = C * 1.8 + 32. Let us write a test covering such transformation. 30 Celsius should be 86 Fahrenheit. [[[TemperatureConverterTest >> testCelciusToFahrenheit	| converter |	converter := TemperatureConverter new. 	self assert: ((converter convertCelsius: 30) = 86.0)]]]The test is structured the following way:- Its selector starts with 'test', here the method is named ==testCelciusToFahrenheit==.- It creates an new instance of ==TemperatureConverter== (it is called the context of the test or more technically its fixture).- Then we check that the expected behavior is really happening. @@todo closeTo: is not really what I want!! About floats[[[TemperatureConverterTest >> testFahrenheitToCelcius	| converter |	converter := TemperatureConverter new. 	self assert: ((converter convertFarhenheit: 86) = 30.0).	self assert: ((converter convertFarhenheit: 50) = 10)]]][[[TemperatureConverterTest >> testFToCScale	| converter results exceptedFahrenheit exceptedCelcius |	converter := TemperatureConverter new. 	results := (converter convertFarhenheitFrom: 50 to: 70 by: 2).	exceptedFahrenheit := {50 . 52 . 54 . 56 .  58. 60. 62. 64. 66. 68 . 70}.	exceptedCelcius := #(10.0 11.1 12.2 13.3 14.4 15.5 16.6 17.7 18.8 20.0 21.1 22.2 23.3 24.4 25.5 26.6).		self assert: (results collect: #key) equals: exceptedFahrenheit. 	1 to: results size do: [:i |			self assert: ((results at: i) value closeTo: (exceptedCelcius at: i)) ] ]]][[[Object subclass: #TemperatureConverter	instanceVariableNames: ''	classVariableNames: ''	package: 'Converter']]][[[TemperatureConverter >> convertCelsius: anInteger 	^ ((anInteger * 1.8) + 32)]]][[[TemperatureConverter >> convertFarhenheit: anInteger 	^ ((anInteger - 32) / 1.8) ]]][[[TemperatureConverter >> convertFarhenheitFrom: low to: high by: step 	"Returns pairs (f, c) for all the farhenheit temperatures from a low to an high temperature"		^ (low to: high by: step)		collect: [ :f | f -> (self convertFarhenheit: f) ]]]]