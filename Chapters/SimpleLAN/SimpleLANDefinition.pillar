!! A Basic Network Simulator
@ch:lan

The purpose of this chapter is to define a little network simulator as a pretext to revisit some concepts such as self, super and inheritance. 

We model a LAN (Local Area Network): A LAN is composed of nodes (computers, printers,). The nodes exchange packets. From an object-oriented point of view, it is interesting because it shows that objects encapsulate responsibilities and that inheritance is used to define incremental behavior. This example is really naive but it focuses on key elements of object-oriented design. 

You will define step by step an application that simulates a simple Local Area Network (LAN). You will create several classes: ==LNPacket== representing the information circulating in the network, ==LNNode==, ==LNWorkstation==, and ==LNPrintServer== representing different nodes composing the network. We start with the simplest version of a LAN. In subsequent exercises we will add new requirements and modify the proposed implementation to take them into account.

Finally if you are interested in LAN and network, there is a similar exercise but with a more realistic model of a network in subsequent chapters.


!!! Simulating a LAN

Before starting to implement the objects that we will need, let us start looking at the creation of a network and packets that will transit into it. Here is a simple LAN definition as described by Figure *@lan*. (We prefix the class names with ==LN== to make sure that you do not get any conflict with other existing classes.)

+A simple LAN.>file://figures/lan.png|width=70|label=lan+

[[[
| mac pc node1 node2 igPrinter |
"create the nodes, workstations, printers and fileserver"
mac := LNWorkstation new name: #mac.
pc := LNWorkstation new name: #pc.
node1 := LNNode new id: #Node1.
node2 := LNNode new id: #Node2.
igPrinter := LNPrinter new id: #igPrinter.
"connect the different LNNodes."
mac nextNode: node1.
node1 nextNode: igPrinter.
igPrinter nextNode: node2.
node2 nextNode: pc.
pc nextNode: mac.
"create a LNPacket and start simulation"
packet := LNPacket new
          addressee: #IGPrinter;
          contents: 'This Packet travelled around to the printer IGPrinter.
mac emit: packet.
]]]

What you should see is that we have different kinds of nodes: simple nodes, workstations and printers. There are connected together to form a ring: circular list of nodes, each pointing to the next one. Then we can create a packet and emit it inside the network. What is happening is that a packet will visit node after node to find the node it has been sent to.

So we will build now piece by piece such a little system.

!!! Sketching the Node class

The class ==LNNode== is the root of all the entities that form a LAN: it represents the most basic behavior: being identifiable and making sure a packet circulate.
This class contains the common behavior for all nodes: 

- The first behavior that a node should have is to know the next node to which it is linked. This way when the information it receives is not addressed to the node, it can pass it to its following node. This way a network is defined as a list of nodes, each node pointing to its next node. 

- The second behavior a node should have is that it should be uniquely identifiable by an identifier or a unique name. This way we can send it packets.

Printers, a servers, and workstations will extend such behavior.

To fullfil such requirements, we represent the unique identifier of a node using a symbol (because symbols are unique in Pharo) and the next node using a node object. It is the node responsibility to send and receive packets of information and we will come back on it once packets are introduced. In next section we will define the class that represents packets.

Here is the description of the class ==LNNode==.

[[[
LNNode inherits from Object
Collaborators: LNNode and LNPacket
Responsibility:
- id (aSymbol) - returns the unique name of the node.
- hasNextNode - tells if the receiver has a next node.
- accept: aPacket - receives a packet and process it. By default it is sent to the next node.
- send: aPacket - sends a packet to the next node.
]]]

Such description says that the class of ==LNNode== inherits from ==Object==. The collaborators are the key objects with which a node will interact to define its expected behavior. Here it will interact with other instance of the class or its subclasses as well as the class ==LNPacket==. The responsibilities are the key behavior that the class should offer. 

!!! Node class definition
Now we will define the class and also a test class to verify that your methods are acting as they should.

!!!!Define a test class

Let us start by defining tests to make sure that the functionalities we just defined are working.
We define a new class named ==#LNNodeTest== that inherits from ==TestCase==.

[[[
TestCase subclass: #LNNodeTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'MiniLAN'
]]]

We can start to write a first test ==testANodeHasAnID== that tests that a node has a unique ID.  
[[[
LNNodeTest >> testANodeHasAnID
	| node |
	node := LNNode new.
	node id: #Node1.
	self assert: node id = #Node1
]]]

We create a node, we set its id and we verify using the ==assert:== message that its id is the one we just set.  Remember that the ==assert:== message expects its argument to be true.


!!!! Class creation
Now create a new package ==MiniLAN==, and create a subclass of ==Object== called ==LNNode==, with two instance variables: ==id== and ==nextNode==.
Here is a possible definition.

[[[
Object subclass: #LNNode
	instanceVariableNames: 'nextNode id'
	classVariableNames: ''
	package: 'MiniLAN'
]]]


!!!!Add accessor methods
Create accessors for the two instance variables. Document the mutators to inform users that the argument passed to ==id:== should be a ==Symbol==, and the arguments passed to ==nextNode:== should be a node. Here are possible definitions.

[[[
LNNode >> id
   ^ id
]]]

[[[   
LNNode >> id: aSymbol
   id := aSymbol
]]]

[[[
LNNode >> nextNode
   ^ nextNode 
]]]

[[[
LNNode >> nextNode: aNode
   nextNode := aNode 
]]]

Execute the test. It should passed. 

!!!! Another test
Now we can write  a new test to specify the behavior of ==hasNextNode==  a method telling whether the receiver has a following node or not.

Here is a test that first checks that a node without following node returns ==false==.
Then it checks that when we add a next node, the method ==hasNextNode== returns ==true==.

[[[
LNNodeTest >> testHasNextNode
	| node followingNode |
	node := LNNode new.
	node id: #Node1.
	"a node without next node"
	self assert: node hasNextNode not.
	
	"now we create a new node and add a following node"
	followingNode := LNNode new.
	followingNode id: #NextNode.
	node nextNode: followingNode.
	self assert: node hasNextNode
]]]


!!!!Define method hasNextNode
Define a method called ==hasNextNode== that returns whether the receiver has a next node or not. 
Once you defined it, execute the test. It should be pass. 

[[[
LNNode >> hasNextNode
   ^ nextNode notNil 
]]]



!!!!Define method printOn:

Again we write a test.

[[[
LNNodeTest >> testPrintOn
		| printed |
		printed := (LNNode new
			id: #Node1;
			nextNode: (LNNode new id: #PC1)) printString.
		self assert: printed = 'Node named: Node1 connected to: PC1'
]]]

Create an instance method named ==printOn:== that puts the class name and name variable on the argument ==aStream==. 

Include the next node's name only if there is a next node. ""Hint:"" look at the method ==printOn:== from previous exercises or other classes in the system, and consider that the instance variable ==id== is a symbol and ==nextNode== is a ==LNNode==.


!!! Sending/receiving packets
A ==LNNode== has two basic messages to send and receive packets. 

When a packet is sent to a node, the node has to accept the packet, and pass it on. Note that with this simple behavior the packet can loop infinitely in the LAN. We will propose some solutions to this issue later. 

To implement this behavior, you should add a protocol ==send-receive==, and implement the following two methods: ==accept: aPacket== and ==send: aPacket==.

Here are a solution.
[[[
LNNode >> accept: aPacket
    "Having received aPacket, send it on. This is the default behavior. My subclasses will probably override me to do something special"
    self send: aPackage 
]]]


[[[
LNNode >> send: aPacket
    "Precondition: self has a nextNode"

    self id trace.
    ' passes a packet to: ' trace.
    self nextNode id traceCr. 
    self nextNode accept: aPacket.
]]]

Note that: 
- ==trace== displays in the transcript the result of sending the message ==printOn:== to the receiver.
- ==traceCr== has a similar behavior but adds a carriage return at the end. 


!!! Create the Packet class

A package is an object that represents a piece of information that is sent from node to node. So the responsibilities of this object are to allow us to define the originator of the packet emission, the address of the receiver and the contents.

Here is a description of the class ==LNPacket==.
[[[
LNPacket inherits from Object
Collaborators: LNNode
Responsibility:
- addressee - returns the name of the node to which the packet is sent.
- contents - describes the contents of the message sent.
- originator - references the node that sent the packet.
]]]


!!!!Define class LNPacket

In the ==MiniLAN== package, create a subclass of ==Object== called ==LNPacket==, with three instance variables: ==contents==, ==addressee==, and ==originator==. Create accessors for each of them in the ==accessing== protocol. The addressee is represented as a symbol, the contents as a string and the originator has a reference to a ==LNNode==.

!!!!Add a printOn: method  
Define the method ==printOn: aStream== that puts a textual representation of a LNPacket on its argument ==aStream==.

!!!! Add the method isAddressedTo:
Define the method ==isAddressedTo: aNode== which returns whether a packet is addressed to a given node. 


@@todo we could split the chapter here and example inheritance in the middle.



!!! Create the class LNWorkstation

A workstation is the entry point for new packets onto the LAN network. It can emit packets to other workstations, printers or file servers. Since it is kind of network ==LNNode==, but provides additional behavior, we will define it a subclass of ==LNNode==. Thus, it inherits the instance variables and methods defined in ==LNNode==. Moreover, a workstation has to process packets that are addressed to it.

Here is a description of the class ==Workstation==.

[[[
LNWorkstation inherits from LNNode
Collaborators: LNNode, LNWorkstation and LNPacket
Responsibility: (the ones of LNNode)
- send: aPacket - sends a packet.
- accept: aPacket - perform an action on packets sent to the workstation (printing in the transcript). For the other packets just send them to the following nodes.
]]]

!!!!Define LNWorkstation

Create a subclass of ==LNNode== called ==LNWorkstation== without instance variables.

!!!!Redefine the method accept:

Define the method ==accept: aPacket== so that if the workstation is the destination of the packet, the following message is written into 
the Transcript. Note that if the packets are not addressed to the workstation they are sent to the next ==LNNode== of the current one.

[[[
(LNWorkstation new
    name: #Mac ;
    nextNode: (LNPrinter new id: #PC1))
          			accept: (LNPacket new addressee: #Mac)

A Packet is accepted by the Workstation Mac.
]]]

""Hints:"" To implement the acceptation of a packet not addressed to the workstation, you could copy and paste the code of the ==LNNode== class. However this is a bad practice, decreasing the reuse of code and the ''Say it only once'' rule. It is better to invoke the default code that is currently overriden by using ==super==.

!!!!Define the method emit:

Define the method ==emit:== that is responsible for inserting packets in the network in the method protocol ==send-receive==. In particular a packet should be marked with its originator and then sent.

[[[
LNWorkstation >> emit: aPacket
  "This is how packets get inserted into the network. This is a likely method to be rewritten to permit
  packets to be entered in various ways. Currently, I assume that someone else creates the packet and
  passes it to me as an argument."
 
	...
]]]

!!! Create the LNPrinter class

With nodes and workstations, we provide only limited functionality of a real LAN. Of course, we would like to do something with the packets that are travelling around the LAN. Therefore, you will now create a class ==LNPrinter==, a special node that when it receives packets addressed to it, prints them (on the Transcript). Implement the class ==LNPrinter==.

Here is a description
[[[
LNPrinter inherits from LNNode
Collaborators: LNNode and LNPacket
Responsibility:
- accept: aLNPacket - if the packet is addressed to the	printer, prints the packet contents else sends the packet
to the following node.
- print: aLNPacket - prints the contents of the packet (into the Transcript for example).
]]]


Implement the following two methods on the class side of the class ==LNNode==, in a protocol called ==examples==. But take care: the code presented below has some bugs that you should find and fix!.

[[[
LNNode class >> anotherSimpleLan
   "create the nodes, workstations and printers"

   | mac pc node1 node2 igPrinter node3 packet |
   mac:= Workstation new id: #mac.
   pc := Workstation new id: #pc.
   node1 := LNNode new id: #Node1.
   node2 := LNNode new id: #Node2.
   node3 := LNNode new id: #Node3.
   igPrinter := LNPrinter new id: #IGPrinter.

   "connect the different LNNodes." 
   mac nextNode: node1.
   node1 nextNode: node2.
   node2 nextNode:igPrinter.
   igPrinter nextNode: node3.
   node3 nextNode: pc.
   pc nextNode: mac.

   "create a LNPacket and start simulation''
   packet := LNPacket new
             addressee: #anotherPrinter;
             contents: 'This packet travels around
             to the printer IGPrinter'.
   pc emit: packet.
]]]




!!! Create FileServer definition
Now we can create new extensions for our LAN.  Create the class ==FileServer==, which is a special ==LNNode== that saves packets that are addressed to it. We can use a simple collection to keep the packet 

[[[
LNFileServer inherits from LNNode
Collaborators: LNNode and LNPacket
Responsibility:
    - accept: aPacket - if the packet is addressed to the file server save it (Transcript trace) 
    else send the LNPacket to the following LNNode.
    - save: aPacket - save a packet.
    - retrievePacketsFrom: aNode - returns the packets sent from a given node.
    - reset - clean the packets received.
]]]








!! Improving the design

Often seasoned object-oriented programmers use the following description to convey good design principles: 

To be a good citizen an object should follow as much as possible the following rules:
- Be private. Never let somebody else play with its data.
- Be lazy. Let do other objects its job.
- Be focused. Do only one main task.

While these guidelines are generic, one of the main consequences is that this is the responsibility
of an object to provide a well defined interface protecting itself from its clients. The other consequence
is that by delegating to other objects, an object concentrates on a single task and responsibility. We now
look how such guidelines can help us to provide better objects in our example.

!!! Current situation

The interface of the packet class is weak. It just provides free access to its data. The main impact of
this weakness is the fact that the clients of the class ==Packet== like the class ==Workstation== rely on the internal coding
of the ==Packet== class as shown in the first line of the following method. A workstation gets to know the internal structure of Packet.

[[[
Workstation>>accept: aPacket
    aPacket addressee = self name
        ifTrue: [ Transcript show: 'A packet is accepted by the Workstation ', self name asString ]
        ifFalse: [ super accept: aPacket ]
]]]

As a consequence, if the structure of the class ==Packet== changes, the code of its clients would have
to change too. Generalizing such a bad practice leads to systems that are badly coupled and being
really difficult to change to meet new requirements.

One of the solution to these problems is to give the responsibility to the objects to create well-formed instances.
Several ways are possible:

- When possible, providing default values for instance variable is a good way to provide well-defined instances.
- It is also a good solution to propose a consistent and well-defined creation interface. For example one can only provide an instance creation method that requires the mandatory value for the instance and forbid the creation of other instances.


!!! Enhancing the Packet API
Let us start with the class ==Packet==.  This is the responsibility of a packet to say if the packet is addressed to a particular node or if it was sent
by a particular node.
- Define a method named ==isAddressedTo: aNode== in 'testing' protocol that answers if a given packet is addressed to the specified node.
- Define a method named ==isOriginatedFrom: aNode== in 'testing' protocol that answers if a given packet is originated from the specified node.
- Once these methods are defined, change the code of all the clients of the class ==Packet== to use them.


!!! Instance Initialization

Let us see how we can initialize instances. We investigate the two solutions for the ==Packet== class.

Just remember that new is sent to classes (a class method) and that the message ==initialize== is sent to 
instances (instance method). 

[[[
    Packet>>initialize
        ....
]]]

In the ==Packet== class, the only instance variable that can have a default value is contents. We can define it as follows: 

[[[
    contents := 'no contents'
]]]

Ideally if a LAN should contain a default trash node, the default address and originator should point
to it. We will implement this functionality in a future lesson. Implement first your own solution.

Note that with this solution it would be convenient to know if a packet contents
is the default one or not. For this purpose you can  provide the method ==hasDefaultContents== that tests
that. You can implement it as :

[[[
Packet >> hasDefaultContents
    ^ contents = 'no contents'

Packet >> initialize
    
    contents := 'no contents'
]]]

But you should apply the rule: 'Say only once' and define a new method that returns the default content
and use it as shown below:

[[[
Packet >> defaultContents
    ^ 'no contents'
	
Packet >> initialize
    ...
    contents := self defaultContent
    ...
	
Packet >> hasDefaultContent
    ^ contents = self defaultContents
]]]

With this solution, we limit the knowledge to the internal coding of the default contents value to only
one method. This way changing it does not affect the clients nor the other part of the class.

!!! A Question of Creation Responsibility

One of the problem with the previous approach for creating the nodes and the packets is the following: it
is the responsibility of the client of the objects to create them well-formed. For example, it is possible to
create a node without specifying a name. This is a disaster for our LAN system. The same problem occurs with the packet: it is possible to create a packet without address nor contents.

We will find a solution to these problems.

!!!! Exercise: new instance creation methods

Define a ''class'' method named ==withName:== in the class ==Node== (protocol 'instance creation') that creates a new node and assign its name.

[[[
Node class>>withName: aSymbol
    ....
]]]

!!!! Exercise: Strengthening packet creation

We now apply the second approach by providing a better interface for creating packet. For this
purpose we define a new creation method that requires a contents and an address.



Define a class methods named ==send:to:== and ==to:== in the class Packet (protocol 'instance creation') that creates a new Packet with a contents and an address.

[[[
Packet class >> send: aString to: aSymbol
	....
	
Packet class >> to: aSymbol
	....
]]]


!!! Conclusion

In this chapter you defined a little simulator a small local network.  Object-oriented design cannot be systematically and automatically done. However, there are guidelines that help handling various pitfalls.
Among such guidelines the following ones are worth applying:
- Create well initialized objects.
- Offer adequate creation API.
- Expose APIs that protect the internal representation of objects.
- Avoid duplication logic.
