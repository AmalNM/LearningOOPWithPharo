!! Object-oriented programming in a nutshell
%%@cha:nutshell

This chapter is an overview of the key mechanisms that characterize object-oriented programming:
''objects'', ''classes'', ''inheritance'', ''messages'', ''methods'' and finally ''late binding''. 
Each of these mechanisms will be used and explained in the book under diverse forms: either a full dedicated chapter or usage in exercises. 

!!! Objects first 
Object-oriented programming is about creating objects and interacting with objects by sending them ''messages''.

!!!! Turtles as an example
Imagine that we have a logo turtle (you will implement it in the following chapters). We can do the following: create a turtle, send it messages to make it move, turn and trace some drawnings. 

!!!! Creating an object
First we create a new turtle by sending the message ==new== to the class ==Turtle==. 

[[[
| t |
t := Turtle new. 
]]]

A class is a cast for objects. All the objects, instances of a class, share the same characteristics and behavior. For example, all the turtle instances have a direction and understand messages to rotate and move. However, each turtle has its own value for its direction.
We say that all the instances of a class have the same instance variables but each as private value
for them. 

!!!! Sending messages

The only way to interact with objects is to send them messages.

[[[
| t |
t := Turtle new. 
t turn: 90.
t go: 100.
t turn: 180. 
t go: 100.
]]]

Messages specify ''what'' the object should do and not how it should do it (this is the duties of methods as we will see later). When we send the message ==go:== we just specify what we expect the receiver to do.  Sending a message is similar to the abstraction provided by procedures or functions in procedural or functional programming language: it hides implementation details. However sending a message is much more than executing a procedure as we will see later. 

!!!! Multiple instances: each with its own state. 
In the following example we show that we can have multiple objects

[[[
| t1 t2 |
t1 := Turtle new. 
t1 turn: 90.
t1 go: 100.
t1 turn: 180. 
t1 go: 100.
t2 := Turtle new.
t2 go: 100.
t2 turn: 40.
t2 go: 100.
]]]

!!!! With counters

Now that you got the main point of objects, we can see that it applies to everything. In Pharo ''everything'' is an object. In fact there is ''nothing'' else, only objects. Here is a little program with counters that you will implement in subsequent chapters. 

We create two counters that we store in variables ==c1== and ==c2== instances of the class ==Counter==. Each counter has its own state but exhibits the same behavior as all the counters defined by the class ==Counter==: 
- when responding to the message ==count==, it returns its value,
- when responding the the message ==increment==, it increment one to its current value. 

[[[
| c1 c2 |
c1 := Counter new.
c2 := Counter new.
c1 count.
>>> 0
c1 increment.
c1 increment.
c1 count. 
>>> 2
c2 count.
>>> 0
c 2 increment.
c2 count. 
>>> 1
]]]



!!! Objects: stepping back

Now that we saw some examples of objects, it is time to step back. Objects are defined by their state, their behavior (shared with the other instances of their class) and an identity. 

- ""State."" Each object has specific state. While all the instances of classes have the same structure, each instance has its own values. Each object has a private state. Clients or users of an object cannot access the state of the object if this one does not explicitly expose it by defining a method returning it (such as the message ==count==).
- ""Behavior."" Each object share the same behavior with all the instances of its class.
- ""Identity."" An object has an identity. It is unique. ==c1== is clearly not the same as ==c2==. 

!!! A class: blueprint of objects

A class is a mold or cast of objects. A class specifies two important aspects of their instances:
- Instance ""structure"". All the instances of a class will have the same structure expressed in terms of ''instance variables''. Pay attention that the variables are the same for all the instances of a class but not their values. Each instance has specific values for its instance variables.
- Instance ""behavior"". All the instances share the same behavior even if this one can be different because applied on different values. 

A class is as a blueprint for its instances. Let us see some examples.

!!!! Example: the class Counter

Let us study the ==Counter== class definition. The class ==Counter== defines that all the instances will have one instance variable named ==count==. 

[[[
Object subclass: #Counter
	instanceVariableNames: 'count'
	classVariableNames: ''
	package: 'LOOP'
]]]


In addition a class is the place that groups the instance behavior. Indeed since all the instances of the class share the same behavior, such behavior is defined and grouped in a class.

For counters, the class defines how to retrieve the counter value, how to increment 
and decrement the count as used in the messages in the previous code snippets.

Here is the definition of the ""method"" ==increment==. 
It simply adds one to the instance variable count.

[[[
Counter >> increment
	count := count + 1
]]]

When we send a message to a counter for example in the expression ==c1 increment==, 
this method ==increment== will be applied on that specific object ==c1==.
In such expression ==c1== is called the ""receiver"" of the message ==increment==. 

In the method ==increment==,  the variable ==count== refers to the variables of the ""receiver"" of the message. 

A method specifies ""how"" a computation is performed, step by step contrarily to a message that expresses ""what"" should be performed. 

!!!! Self = receiver
Imagine that now we would like to send a message to the object that receives the message. We need a way to refer to the this object. 
Pharo defines a special variable for this exact purpose: ==self==. 

@@note ==self== always refers to the message receiver that is currently executed.

For example we can implement the method ==incrementByTwo== as follows:

[[[
Counter >> incrementByTwo
	self increment. 
	self increment
]]]

When we execute the expression ==c1 incrementByTwo==, during the execution of the method ==incrementByTwo==, ==self== refers to ==c1==. 


We will explain how a method is found when a message is sent but first we should explain inheritance, i.e., how a class is defined incrementally from a root class.

!!!! Design corner: About collaborators and limited responsibility
As with any paradigm, we can define well designed programs or poor ones. Poor programs are often more buggy, more difficult to understand and reuse.

Usually an object does not exist in isolation, it often collaborate to implement its behavior. 
For example, a graphic turtle interacts with numbers, colors, and a graphical canvas to draw on it. A book will interact with a publisher, authors and optionally a collection or library and renter.

Such collaborators are other objects that do not necessary define the state of the object itself (a canvas is not part of a turtle properties still a turtle interact with it.).

To help you design good classes you should carefully think about the collaborators of an object.
Usually an object should not have too many collaborators. 

Another design guideline is that an object should have a limited set of responsibilities. For example a graphic turtle knows how to display itself and draw on a canvas. A counter knows
how to store and manipulate a value.


!!! Inheritance

Object-oriented programming is also based on the ''incremental'' definition of abstractions. This incremental definition mechanism is central to support reuse and extension of abstraction. It is called ''inheritance''. The idea is that you can define a new abstraction (a class) by refining an existing one (its superclass). We said that a subclass inherits from a superclass.

Class inheritance creates trees of classes as shown in Figure *@fig:inhAnimal*. A class in such trees can have instances. All the instances share the behavior defined in their class and superclasses. 
This is within such trees that the system looks up the method corresponding to a message.

Inheritance supports code reuse because instance variable and methods defined on a root concept (class) may be applicable to its refinement. 

We will take a really simple and naive example to illustrate some of the key aspects. This is a rather simple but nice to show the key aspects we want to illustrate: 
- ''incremental definition'': a subclass is defined by expressing the difference with its superclass,
- ''state reuse'': instances of a subclass have at least the state structure of the superclass,
- ''behavior reuse'': when instances of a subclass receive a message, methods of the superclass may be executed, 
- ''behavior redefinition (overriding)'': a subclass may change locally a method definition inherited from its superclass,
- ''behavior extension'': a subclass may extend the behavior of one of its superclasses,
- ''subclass behavior can be injected in superclass behavior'': behavior defined a subclass may be executed in place of the one of a superclass. This is a really important feature of inheritance.



+A class hierarchy with instances of different classes.>file://figures/Ref-Hierarchy.png|width=50|label=fig:inhAnimal+

!!! Playing with Animals 
Imagine that we want to represent animals. We suggest that you implement the example to be able to explore it.


Here is a simple scenario that we want to be able to execute: we create an animal and ask it to present itself. 

[[[
(Animal new name: 'SpongeBob') presentYourself
>>> 'I m a Animal. My name is SpongeBob, and I walk.'
]]]


!!!! Animal class definition
We define a class ==Animal== as follows. 


[[[
Object subclass: #Animal
	instanceVariableNames: 'name'
	classVariableNames: ''
	package: 'LOOP'
]]]

The class ==Animal== inherits from the class ==Object==. The class ==Object== is the class defining the common behavior to all objects in the system such as error, access to class,...
The class ==Object== is the root of the inheritance hierarchy.

The class ==Animal== defines the structure of all instances: The class ==Animal== defines one instance variable named ==name==, it means that every instance has a name.

!!!! Methods
We define three methods: first one method to be able to set the name of the animal. 
The method ==name:== takes as argument a string and stores this argument in the name instance variable of the receiver.

[[[
Animal >> name: aString
	name := aString
]]]

The method ==move== is just returning the way the animal moves. Here we just return a string. 
 
[[[
Animal >> move
	^ 'walk'
]]]

Finally we define a method (the logic could be better but we do not want to make it more complex) so that the animal can present itself. 
This method simply returns a string which is the concatenation of information obtained by sending different messages such as ==self class printString== (which basically returns the name of the class) and ==self move==. 
Note that the name instance variable is accessed directly. 

[[[
Animal >> presentYourself
	^ 'I m a ', self class printString, '. My name is ', name, ', and I ', self move, '.' 
]]]

At this point, the example of SpongeBob should work. Now we are ready to show a simple example of code reuse. 


!!! Reuse of ancestor logic

Imagine that we want to reuse the behavior of animal and to add extra behavior. We can now define a new class ==Dog== which inherits from the class ==Animal==. 

[[[
Animal subclass: #Dog
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'LOOP'
]]]

Since we did not add new instance variables during the definition of the class ==Dog==.
It means that instances of the class ==Dog== will have the same structure as the class ==Animal==.

What we can see is that the methods defined in the class ==Animal== can be executed on the instances 
of ==Dog==. The following example show that the method ==name:==, ==presentYourself== and ==move==
are reused as such. Note that usually when we define a new class it is to add state and new behavior or to extend existing one. 

[[[
(Dog new name: 'Dingo') presentYourself
>>> 'I m a Dog. My name is Dingo, and I walk.'
]]]

Nothing prevents us to define methods in the class ==Dog==. Such methods, however, will only be available for ==Dog== and its subclass instances.


!!! Method lookup

Now it is time to explain what is happening when an object receives a message send. In fact this is really simple but extremely powerful. 
When an object, the message receiver, receives a message, the method with the same selector than the message is looked up starting from the class of receiver. When a method with the same selector is found in a class is returned and executed on the receiver. When there is no method with the same selector, the look up continues in the superclass of the current class.



+Lookup: start in the class of the receiver and look for method in class and superclasses.>file://figures/Ref-LookupBasic.png|width=50|label=fig:Ref-LookupBasic+


explanations here




!!! Specialisation of ancestor behavior
Now we want to show another aspect of inheritance, a subclass can override the behavior defined in a superclass. 
Let us define a new subclass of ==Animal==, named ==Duck==.

[[[
Animal subclass: #Duck
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'LOOP'
]]]

Now we ''redefine'' the method ==move== to return a different value.
[[[
Duck >> move 

	^ 'swim'
]]]

[[[
(Duck new name: 'Donald') presentYourself 
>>> 'I m a Duck. My name is Donald, and I swim.'
]]]


+Overriding superclass behavior.>file://figures/Ref-LookupBasicOverride.png|width=60|label=fig:Ref-LookupBasicOverride+

!!! Sending a message is making a choice

@@note Sending messages is making a choice




!!! Extending ancestor behavior

A subclass may not only specialize but extend the behavior of one of its superclasses. Imagine that we want to define that a duck can swim ''in addition'' to walk. 


Using ==self move== does not work because it creates an endless loop. 
[[[
Duck >> move 

	^ self move , '& swim'
]]]

We need a way to invoke a method of the superclass ==Animal== even though the receiver of the message is an instance of the class ==Duck==.
Pharo offers a special variable called ==super== for this exact purpose. 

@@note ==super== refers to the message receiver (as ==self== does), but it invokes a method defined in classes above the class using it. 

We redefine the method ==move== as follows:
 
[[[
Duck >> move 

	^ super move , '& swim'
]]]

We see the result executing the same code snippet. 

[[[
(Duck new name: 'Donald') presentYourself 
>>> 'I m a Duck. My name is Donald, and I walk & swim.'
]]]

What is happening is the following: 
- the method ==presentYourself== defined on the class ==Animal== is executed and at some point, it executes ==self move==. ==self== here is ==donald== the instance of ==Duck==. 
- the method ==move== defined on the class ==Duck==, is executed

+Extending superclass behavior.>file://figures/Ref-LookupBasicSuper.png|width=60|label=fig:Ref-LookupBasicSuper+

!!! Messages are late bound

move injected from subclasses into superclass' code. 
+Subclass behavior can be invoked from superclass behavior.>file://figures/Ref-LookupLateBinding.png|width=60|label=fig:Ref-LookupLateBinding+


!!! Creating a hook
With the concept of late binding in mind, each time we send a message to self we create a customization point for subclasses.

[[[
Animal >> name
   ^ name
]]]


[[[
Animal >> presentYourself
	^ 'I m a ', self class printString, '. My name is ', self name, ', and I ', self move, '.' 
]]]


[[[
Duck >> name
	^ '*', super name, '*' 
]]]

[[[
Dog >> name
	^ '%', super name, '%' 
]]]

[[[
(Duck new name: 'Donald') presentYourself 
>>> 'I m a Duck. My name is *Donald*, and I walk & swim.'
]]]

[[[
(Dog new name: 'Dingo') presentYourself
>>> 'I m a Dog. My name is %Dingo%, and I walk.'
]]]

@@note self sends are creating customization points. 



!!! About polymorphism

[[[
Object subclass: #Presenter
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'WithQuentin'
]]]

[[[
Presenter >> present: anObject

	^ 'I m a ', anObject class printString, '. My name is ', anObject name, ', and I move that way: ', anObject move, '.'
]]]

[[[
present: anObject

	^ 'I m a ', anObject class printString, '. My name is ', anObject name, ', and I move that way: ', anObject move, '.'
]]]

[[[
Presenter new 
	present: (Dog new name: 'Dingo')
	
>>>"'I m a Dog. My name is Dingo, and I move that way: walk.'"
]]]

[[[
Object subclass: #Aniplouf
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'WithQuentin'
]]]

Will not be able to reuse Animal. 

[[[
Aniplouf >> move 

	^ 'spatial teleportation'
]]]

[[[
partName

	^ String streamContents: [ :s |
			3 timesRepeat:  [ s nextPut: 'xyzqt' atRandom ]]
]]]
[[[
Aniplouf >> name

	^ self partName
]]]

[[[
Presenter new 
	present: (Aniplouf new )
	
	"" 'I m a Aniplouf. My name is super special entity, and I move that way: spatial teleportation.'"
]]]	


!!! Conclusion

